#!/usr/bin/env python
# In project imports


# Python imports
import csv
import argparse
import numpy as np
import matplotlib.pyplot as plt


def parse_args():
    """
    Parse input arguments
    """
    parser = argparse.ArgumentParser(description='Plot the results')

    # Main arguments
    parser.add_argument('-i', '--in_file', help='Specify the directory of in_file',
                        default=None, type=str)
    parser.add_argument('-n', '--in_file_name', help='Specify the file name in default dir',
                        default=None, type=str)
    parser.add_argument('-o', '--out_file', help='Write statistics to files named <out_file>_<key>.csv',
                        type=str, default=None)
    args = parser.parse_args()
    return args


def get_noise_bin(per_noise):
    noise_range = 25
    if per_noise < 0:
        raise ValueError()
    if per_noise > 1:
        raise ValueError()
    if per_noise == 0:
        return "Noise 0%"
    for i in range(100 / noise_range):
        if per_noise * 100 <= i * noise_range:
            return "Noise {}-{}%".format((i - 1) * noise_range, i * noise_range)
    return "Noise 100%"


class Datum(object):
    def __init__(self, num_demos, num_goals, num_correct, num_bad):
        self.num_demos = num_demos
        self.num_goals = num_goals
        self.num_correct = num_correct
        self.num_bad = num_bad
        self.per_bad = float(self.num_bad) / self.num_demos


class Aggregate(object):
    def __init__(self, datums):
        self.total_num_goals = sum([d.num_goals for d in datums])
        self.weights = np.array([float(d.num_goals) / self.total_num_goals for d in datums])
        self.percent_correct = np.array([float(d.num_correct) / d.num_goals for d in datums])
        self.average = np.average(self.percent_correct, weights=self.weights)
        self.std_dev = np.sqrt(np.average(np.abs(self.percent_correct - self.average)**2))


class Experiment(object):
    def __init__(self):
        self._data = {}

    def insert(self, datum):
        try:
            self._data[datum.num_demos].append(datum)
        except KeyError:
            self._data[datum.num_demos] = [datum]

    def aggregate(self):
        self._num_demos = []
        self._aggregates = []
        keys = sorted(self._data.keys())
        for key in keys:
            self._num_demos.append(key)
            self._aggregates.append(Aggregate(self._data[key]))

    def demos(self):
        return list(self._num_demos)

    def averages(self):
        return [agg.average for agg in self._aggregates]

    def std_devs(self):
        return [agg.std_dev for agg in self._aggregates]


def main():
    # Get arguments
    args = parse_args()

    # Initialize lists of independent and dependent variables
    input_order = ['Time Stamp', 'Goal Type', 'Object #s', 'Demo #s', 'Goal #s', 'Bad Demo #s', 'Correct Demo #s',
                   'Factor Learner', 'Factors', 'Min Object #s', 'Max Object #s', 'Consistency', 'Commonsense']
    input_independent = ['Goal Type', 'Object #s', 'Factor Learner', 'Factors', 'Consistency', 'Noise %']

    # Initialize dictionaries
    category = {var: [] for var in input_independent}  # includes set of values that independent variables can take
    data_dict = {}  # includes the average correct demo for each run

    # Set file directory based on input args
    if args.in_file_name is not None:
        directory = "/home/user/catkin_ws/src/mobile_manipulation/srp-md/data/" + args.in_file_name
    elif args.in_file is not None:
        directory = args.in_file
    else:
        print "Error! Specify directory"
        return

    # Read in the in_file
    with open(directory) as csvfile:
        data = csv.reader(csvfile, delimiter=',')

        for row in data:
            # Fill in data_dict and data_count
            num_demo = int(row[input_order.index('Demo #s')])
            num_goals = int(row[input_order.index('Goal #s')])
            num_correct = int(row[input_order.index('Correct Demo #s')])
            num_bad = int(row[input_order.index('Bad Demo #s')])
            datum = Datum(num_demo, num_goals, num_correct, num_bad)

            # Initialize key for data_dict
            key_list = []

            for var in input_independent:
                if var == "Noise %":
                    ele = get_noise_bin(datum.per_bad)
                else:
                    ele = row[input_order.index(var)]
                key_list.append(ele)

                # Fill in the categories
                if ele not in category[var]:
                    category[var].append(ele)

            key_list = tuple(key_list)

            try:
                data_dict[key_list].insert(datum)
            except KeyError:
                data_dict[key_list] = Experiment()
                data_dict[key_list].insert(datum)

    # Average the entries in data_dict by value in data_count
    for value in data_dict.values():
        value.aggregate()

    # Write aggregated data to out file
    if args.out_file is not None:
        demos = list(range(1, 11)) + [50, 100]
        with open(args.out_file, 'wb') as out_file:
            writer = csv.writer(out_file)
            title_row = list(input_independent)
            for i in demos:
                title_row.append('Avg {}'.format(i))
            for i in demos:
                title_row.append('Std dev {}'.format(i))
            writer.writerow(title_row)
            for key, data in data_dict.iteritems():
                experiment = [item for item in key]
                aggregates = [None] * 2 * len(demos)
                for num_demos, avg, std_dev in zip(data.demos(), data.averages(), data.std_devs()):
                    i = demos.index(num_demos)
                    aggregates[i] = avg
                    aggregates[len(demos) + i] = std_dev
                writer.writerow(experiment + aggregates)

    # Now plot the graphs!
    # For each independent variables, do
    for i in range(len(input_independent)):
        var = input_independent[i]
        # For each value it can take, plot and compare how other variables change the result
        for val in category[var]:
            # For each entry in data_dict:
            for key_list in data_dict.keys():
                if key_list[i] == val:
                    plt.errorbar(data_dict[key_list].demos(), data_dict[key_list].averages(),
                                 yerr=data_dict[key_list].std_devs(), marker='o', linewidth=2, linestyle='dashed',
                                 label=key_list)

            plt.title(var + ": " + val, fontsize=14)
            plt.xlabel("Number of Demos", fontsize=14)
            plt.xticks(fontsize=14)
            plt.ylabel("Number of Correct Goals", fontsize=14)
            plt.yticks(fontsize=14)
            plt.legend()
            plt.show()
            plt.clf()

    for key_list in data_dict.keys():
        plt.errorbar(data_dict[key_list].demos(), data_dict[key_list].averages(),
                     yerr=data_dict[key_list].std_devs(), marker='o', linewidth=2, linestyle='dashed', label=key_list)

    plt.title("EVERYTHING", fontsize=14)
    plt.xlabel("Number of Demos", fontsize=14)
    plt.xticks(fontsize=14)
    plt.ylabel("Number of Correct Goals", fontsize=14)
    plt.yticks(fontsize=14)
    plt.legend()
    plt.show()
    plt.clf()


if __name__ == '__main__':
    main()

rng = np.arange(50)
rnd = np.random.randint(0, 10, size=(3, rng.size))
yrs = 1950 + rng

fig, ax = plt.subplots(figsize=(5, 3))
ax.stackplot(yrs, rng + rnd, labels=['Eastasia', 'Eurasia', 'Oceania'])
ax.set_title('Combined debt growth over time')
ax.legend(loc='upper left')
ax.set_ylabel('Total debt')
ax.set_xlim(xmin=yrs[0], xmax=yrs[-1])
fig.tight_layout()
