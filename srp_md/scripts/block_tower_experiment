#!/usr/bin/env python
# In project imports
import srp_md
from srp_md import learn, sense, goal, srp_md_log

# Ros imports
import rospy

# Python imports
import logging
import argparse
import sys
import signal

# Get a logger
logger = logging.getLogger('srp_md')
logger.setLevel(logging.INFO)


def parse_args():
    """
    Parse input arguments
    """
    parser = argparse.ArgumentParser(description='Run block tower experiment')
    parser.add_argument('--num_demos', dest='num_demos', help='Specify the number of goal demos to give',
                        default=100, type=int)
    parser.add_argument('--num_goals', dest='num_goals', help='Specify the number of goals to generate',
                        default=100, type=int)
    parser.add_argument('--factor_learner', dest='factor_learner', help='Specify the factor learner',
                        default='joint_frequency', type=str, choices=learn.FACTOR_LEARNERS.keys())
    parser.add_argument('--log_level', dest='log_level', help='Set the logging level', default=logging.DEBUG, type=int,
                        choices=[logging.DEBUG, logging.INFO, logging.WARNING, logging.ERROR, logging.CRITICAL])
    args = parser.parse_args()
    return args


def main():
    # Get arguments
    args = parse_args()
    logger.setLevel(args.log_level)

    # Setup ros
    rospy.init_node('block_tower_experiment')

    # Define the srp
    srp = srp_md.SrpMd(learner='factor_graph_learner', sensor='block_tower_sensor',
                       goal_generator='factor_graph_goal_generator')
    srp.demo_type = 'only_goal'
    srp.set_learner_attributes(factor_learner=learn.FACTOR_LEARNERS['joint_frequency'])

    # Experiment
    # init
    num_correct = 0
    # Get demos
    for _ in range(args.num_demos):
        srp.process_data()
    logger.info('Completed {} demos'.format(args.num_demos))
    # Learn
    srp.learn()
    logger.info('Learned')
    # Generate goals from random observations
    srp.demo_type = 'random'
    for _ in range(args.num_goals):
        srp.generate_goal()
        if srp.evaluate_goal():
            num_correct += 1
    logger.info('Generated and evaluated {} goals with {}%% correct'.format(args.num_goals,
                                                                            100.0 * num_correct / args.num_goals))


if __name__ == '__main__':
    logger.info('Block tower experiment starting up... #BOLD')
    sys.argv = rospy.myargv()
    try:
        main()
    finally:
        logger.info('Block tower experiment stopping... #BOLD')
