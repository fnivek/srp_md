#!/usr/bin/env python
import functools
import sys

import rospy

import py_trees
import py_trees_ros

from geometry_msgs.msg import Pose, Transform

from srp_md.act import ResetAct, GripperAct, OpenGripperAct, CloseGripperAct, MoveToPoseAct, MoveToRelativePoseAct#, PickAct
from behavior_manager.interfaces.manipulation_behavior_new import (TuckWithCondBehavior, HeadMoveBehavior,
                                                                   FullyCollapseTorso, FullyExtendTorso)
from behavior_manager.interfaces.fetch_manipulation_behavior import *

TICKPERIOD = 100  # ms


def build_tree():
    root = py_trees.composites.Sequence(name='srp_md_actions_test')

    test_pose = Pose()
    test_pose.position.x = 0.75
    test_pose.position.y = 0.
    test_pose.position.z = 1.10
    test_pose.orientation.w = 0.707
    test_pose.orientation.x = 0.707
    test_pose.orientation.y = 0.
    test_pose.orientation.z = 0.

    test_transform = Transform()
    test_transform.translation.x = 0.
    test_transform.translation.y = 0.
    test_transform.translation.z = 0.5
    test_transform.rotation.x = 0.
    test_transform.rotation.y = 0.
    test_transform.rotation.z = 0.
    test_transform.rotation.w = 0.


    obj_bbox = []
    py_trees.blackboard.Blackboard().set('obj_key', ['obj_name', obj_bbox])

    root.add_children([
        py_trees.meta.oneshot(ResetAct)('reset'),
        FullyExtendTorso('act_please_extend_torso'),
        MoveToPoseAct('move_to_test_pose', pose=test_pose),
        MoveToRelativePoseAct('move_to_test_pose', transform=test_transform),
        #PickAct('pick_1'),
    ])
    return py_trees_ros.trees.BehaviourTree(root)


def shutdown(tree):
    """Stop the tree."""
    tree.interrupt()


def main():
    # Init ros
    rospy.init_node('srp_md_actions_test')

    # This is a test tree so initilize set debug level
    py_trees.logging.level = py_trees.logging.Level.DEBUG

    # Build a tree
    tree = build_tree()

    # Make sure the tree gets shutdown when ros does
    rospy.on_shutdown(functools.partial(shutdown, tree))

    # Setup the tree
    #   Give it 10 seconds to start
    timeout = 10
    print 'Waiting {}s for tree to start'.format(timeout)
    if not tree.setup(timeout=timeout):
        rospy.logerr("failed to setup the tree, aborting.")
        sys.exit(1)

    # Start ticking tree at 1 / TICKPERIOD(ms)
    tree.tick_tock(TICKPERIOD)


if __name__ == '__main__':
    main()
