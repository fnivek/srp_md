#!/usr/bin/env python
import functools
import sys

import rospy

import py_trees
import py_trees_ros

from geometry_msgs.msg import Pose, Transform, TransformStamped
from sensor_msgs.msg import PointCloud2
from vision_msgs.msg import BoundingBox3D

from srp_md.act import (ResetAct, GripperAct, OpenGripperAct, CloseGripperAct, MoveToPoseAct, MoveToRelativePoseAct,
                        GetDopeSnapshotAct, PickAct, PlaceAct, GetTableAct, CropPCAct, TFPCAct, PCPubAct,
                        ChooseGrasplocObjAct, GrasplocAct, FilterGrasplocPoints, AddCollisionBoxAct, MoveToFirstPoseAct,
                        FreeSpaceFinderAct, GrasplocPickAct, RemoveCollisionBoxAct, OffsetPoses,
                        SetAllowGripperCollisionAct)
from behavior_manager.interfaces.manipulation_behavior_new import (TuckWithCondBehavior, HeadMoveBehavior,
                                                                   FullyCollapseTorso, FullyExtendTorso)
from behavior_manager.interfaces.fetch_manipulation_behavior import *

TICKPERIOD = 500  # ms


def build_tree():
    root = py_trees.composites.Sequence(name='srp_md_actions_test')

    test_pose = Pose()
    test_pose.position.x = 0.75
    test_pose.position.y = 0.
    test_pose.position.z = 1.0
    test_pose.orientation.w = 0.707
    test_pose.orientation.x = 0.707
    test_pose.orientation.y = 0.
    test_pose.orientation.z = 0.

    test_transform1 = TransformStamped()
    test_transform1.header.frame_id = "base_link"
    test_transform1.transform.translation.x = 0.
    test_transform1.transform.translation.y = 0.
    test_transform1.transform.translation.z = 0.25
    test_transform1.transform.rotation.x = 0.707
    test_transform1.transform.rotation.y = 0.
    test_transform1.transform.rotation.z = 0.
    test_transform1.transform.rotation.w = 0.707

    test_transform2 = TransformStamped()
    test_transform2.header.frame_id = "gripper_link"
    test_transform2.transform.translation.x = 0.
    test_transform2.transform.translation.y = 0.25
    test_transform2.transform.translation.z = 0.
    test_transform2.transform.rotation.x = 0.707
    test_transform2.transform.rotation.y = 0.
    test_transform2.transform.rotation.z = 0.
    test_transform2.transform.rotation.w = 0.707

    test_transform3 = TransformStamped()
    test_transform3.header.frame_id = "gripper_link"
    test_transform3.transform.translation.x = 0.
    test_transform3.transform.translation.y = 0.
    test_transform3.transform.translation.z = -0.25
    test_transform3.transform.rotation.x = 0.707
    test_transform3.transform.rotation.y = 0.
    test_transform3.transform.rotation.z = 0.
    test_transform3.transform.rotation.w = 0.707

    blackboard = py_trees.blackboard.Blackboard()

    grasp_pose = Pose()
    grasp_pose.position.x = 0.75
    grasp_pose.position.y = 0.0
    grasp_pose.position.z = 1.0
    grasp_pose.orientation.w = 0.924
    grasp_pose.orientation.x = 0.
    grasp_pose.orientation.y = 0.383
    grasp_pose.orientation.z = 0.
    blackboard.set('grasp_pose', grasp_pose)

    bb = BoundingBox3D()
    bb.center.position.x = 1.0
    bb.center.position.y = 0.0
    bb.center.position.z = 0.75
    bb.center.orientation.x = 0.0
    bb.center.orientation.y = 0.087
    bb.center.orientation.z = 0.0
    bb.center.orientation.w = 0.996
    bb.size.x = 0.25
    bb.size.y = 0.25
    bb.size.z = 0.5
    blackboard.set('crop_box', bb)

    left_wall_pose = Pose()
    left_wall_pose.position.x = 0.0
    left_wall_pose.position.y = 0.5
    left_wall_pose.position.z = 0.0
    left_wall_pose.orientation.w = 1.0
    left_wall_pose.orientation.x = 0.0
    left_wall_pose.orientation.y = 0.0
    left_wall_pose.orientation.z = 0.0

    right_wall_pose = Pose()
    right_wall_pose.position.x = 0.0
    right_wall_pose.position.y = -0.5
    right_wall_pose.position.z = 0.0
    right_wall_pose.orientation.w = 1.0
    right_wall_pose.orientation.x = 0.0
    right_wall_pose.orientation.y = 0.0
    right_wall_pose.orientation.z = 0.0

    bot_wall_pose = Pose()
    bot_wall_pose.position.x = 0.0
    bot_wall_pose.position.y = 0.0
    bot_wall_pose.position.z = 0.45
    bot_wall_pose.orientation.w = 1.0
    bot_wall_pose.orientation.x = 0.0
    bot_wall_pose.orientation.y = 0.0
    bot_wall_pose.orientation.z = 0.0

    table = Pose()
    table.position.x = 1.0
    table.position.y = 0.0
    table.position.z = 0.38
    table.orientation.w = 1.0
    table.orientation.x = 0.0
    table.orientation.y = 0.0
    table.orientation.z = 0.0
    blackboard.set('table_collision_obj', ['table', table, [0.8, 4, table.position.z * 2]])

    gripper_length = 0.154
    pre_grasp_offset = 0.1

    to_grasp_tf = TransformStamped()
    to_grasp_tf.header.frame_id = "gripper_link"
    to_grasp_tf.transform.translation.x = pre_grasp_offset * 1.0
    to_grasp_tf.transform.rotation.w = 1.0

    up_tf = TransformStamped()
    up_tf.header.frame_id = "base_link"
    up_tf.transform.translation.z = 0.3
    up_tf.transform.rotation.w = 1

    root.add_children([
        AddCollisionBoxAct('act_add_left_wall', box_name='left_wall', box_pose=left_wall_pose, box_size=[10, 0.1, 10]),
        AddCollisionBoxAct('act_add_right_wall', box_name='right_wall', box_pose=right_wall_pose, box_size=[10, 0.1, 10]),
        AddCollisionBoxAct('act_add_bot_wall', box_name='bot_wall', box_pose=bot_wall_pose, box_size=[0.5, 0.5, 0.01]),
        AddCollisionBoxAct('act_add_table', box_bb_key='table_collision_obj'),
        # py_trees.meta.oneshot(ResetAct)('reset'),
        # py_trees.meta.oneshot(FullyExtendTorso)('act_please_extend_torso'),
        FullyExtendTorso('act_please_extend_torso'),
        # # FullyCollapseTorso('act_please_collapse_torso'),
        # # GetDopeSnapshotAct('act_get_dope_snapshot'),
        # # PickAct('pick_1', 'grasp_pose'),
        OpenGripperAct('act_open_gripper'),
        TuckWithCondBehavior('act_tuck_arm', tuck_pose='tuck'),
        # # # PlaceAct('place_1', 'grasp_pose'),
        # # MoveToPoseAct('move_to_test_pose', pose=test_pose),
        # # MoveToRelativePoseAct('move_to_test_pose', transform=test_transform1),
        # # MoveToRelativePoseAct('move_to_test_pose', transform=test_transform2),
        # # MoveToRelativePoseAct('move_to_test_pose', transform=test_transform3),
        # # GetTableAct('act_get_table'),
        GetDopeSnapshotAct('act_get_dope_snapshot'),
        ChooseGrasplocObjAct('act_choose_grasploc_obj'),
        py_trees_ros.subscribers.ToBlackboard(
            name='act_get_pc',
            topic_name='/head_camera/depth_registered/points',
            topic_type=PointCloud2,
            blackboard_variables={'in_pc': None},
            clearing_policy=py_trees.common.ClearingPolicy.ON_INITIALISE),
        TFPCAct('act_tf_pc', 'in_pc', 'base_link', 'tfed_pc'),
        # PCPubAct('act_pub_tfed_pc', 'tfed_pc', 'tfed_pc'),
        CropPCAct('act_test_crop_pc', 'tfed_pc', 'crop_box', 'croped_pc'),
        PCPubAct('act_pub_croped_pc', 'croped_pc', 'croped_pc'),
        GrasplocAct('act_grasploc', 'croped_pc', 'grasploc'),
        FilterGrasplocPoints('act_filt_grasploc'),
        OffsetPoses('act_offset_grasploc_poses',
                    offset=[-(gripper_length + pre_grasp_offset), 0, 0],
                    in_poses_key='filtered_grasploc',
                    out_poses_key='offset_grasploc', debug=True), # The gripper origin is in the wrist so move out along x
        GrasplocPickAct('act_grasploc_pick', 'offset_grasploc'),
        SetAllowGripperCollisionAct('act_ignore_gripper_collision', allow=True),
        MoveToRelativePoseAct('act_move_to_grasp_pose', transform=to_grasp_tf),
        CloseGripperAct('act_close_gripper'),
        MoveToRelativePoseAct('act_move_up', transform=up_tf),
        SetAllowGripperCollisionAct('act_ignore_gripper_collision', allow=False),
    ])
    return py_trees_ros.trees.BehaviourTree(root)


def shutdown(tree):
    """Stop the tree."""
    tree.interrupt()


def main():
    # Init ros
    rospy.init_node('srp_md_actions_test')

    # This is a test tree so initilize set debug level
    py_trees.logging.level = py_trees.logging.Level.DEBUG

    # Build a tree
    tree = build_tree()

    # Make sure the tree gets shutdown when ros does
    rospy.on_shutdown(functools.partial(shutdown, tree))

    # Setup the tree
    #   Give it 10 seconds to start
    timeout = 10
    print 'Waiting {}s for tree to start'.format(timeout)
    if not tree.setup(timeout=timeout):
        rospy.logerr("failed to setup the tree, aborting.")
        sys.exit(1)

    # Start ticking tree at 1 / TICKPERIOD(ms)
    tree.tick_tock(TICKPERIOD)


if __name__ == '__main__':
    main()
