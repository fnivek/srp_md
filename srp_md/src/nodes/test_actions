#!/usr/bin/env python
import functools
import sys

import rospy

import py_trees
import py_trees_ros

from gazebo_msgs.srv import SpawnModel
from geometry_msgs.msg import Pose, Transform, TransformStamped
from sensor_msgs.msg import PointCloud2
from vision_msgs.msg import BoundingBox3D
from behavior_manager.interfaces.sleep_behavior import *
from gazebo_msgs.msg import *
import move_base_msgs.msg as move_base_msgs

from srp_md.act import (ResetAct, GripperAct, OpenGripperAct, CloseGripperAct, MoveToPoseAct, MoveToRelativePoseAct, ObjectTestInitializationAct,
                        # GetDopeSnapshotAct, 
                        SpawnModelAct,
                        # FetchInitializationAct,
                        ObjectTranslationAct, ObjectInitializationAct, PushBoxAct, GrabBoxAct, AddAllObjectCollisionBoxAct,
                        GetFakeDopeSnapshotAct, TeleportObjectAct, StabilizeObjectAct, 
                        # LinkAttachingAct, LinkDettachingAct,
                        PickWithPoseAct, PlaceWithPoseAct, GetTableAct, CropPCAct, TFPCAct, PCPubAct,GroceryBoxInitializationAct,
                        ChooseGrasplocObjAct, GrasplocAct, FilterGrasplocPoints, AddCollisionBoxAct, MoveToFirstPoseAct,
                        FreeSpaceFinderAct, GrasplocPickAct, RemoveCollisionBoxAct, OffsetPoses, GetStackPoseAct, PickAct,MoveToStartAct,
                        SetAllowGripperCollisionAct, GetDesiredPoseAct, RelativeCartesianMoveAct, GraspPoseGeneration, PlaceAct,
                        GetDopeAndPoseAct, AttachObjectAct)
from behavior_manager.interfaces.manipulation_behavior_new import (TuckWithCondBehavior, HeadMoveBehavior, TuckBehavior, 
                                                                   FullyCollapseTorso, FullyExtendTorso)
from behavior_manager.interfaces.fetch_manipulation_behavior import *

TICKPERIOD = 500  # ms


def build_tree():
    root = py_trees.composites.Sequence(name='srp_md_actions_test')

    test_pose = Pose()
    test_pose.position.x = 0.75
    test_pose.position.y = 0.
    test_pose.position.z = 1.0
    test_pose.orientation.w = 0.707
    test_pose.orientation.x = 0.707
    test_pose.orientation.y = 0.
    test_pose.orientation.z = 0.

    test_transform1 = TransformStamped()
    test_transform1.header.frame_id = "base_link"
    test_transform1.transform.translation.x = 0.
    test_transform1.transform.translation.y = 0.
    test_transform1.transform.translation.z = 0.25
    test_transform1.transform.rotation.x = 0.707
    test_transform1.transform.rotation.y = 0.
    test_transform1.transform.rotation.z = 0.
    test_transform1.transform.rotation.w = 0.707

    test_transform2 = TransformStamped()
    test_transform2.header.frame_id = "gripper_link"
    test_transform2.transform.translation.x = 0.
    test_transform2.transform.translation.y = 0.25
    test_transform2.transform.translation.z = 0.
    test_transform2.transform.rotation.x = 0.707
    test_transform2.transform.rotation.y = 0.
    test_transform2.transform.rotation.z = 0.
    test_transform2.transform.rotation.w = 0.707

    test_transform3 = TransformStamped()
    test_transform3.header.frame_id = "gripper_link"
    test_transform3.transform.translation.x = 0.
    test_transform3.transform.translation.y = 0.
    test_transform3.transform.translation.z = -0.25
    test_transform3.transform.rotation.x = 0.707
    test_transform3.transform.rotation.y = 0.
    test_transform3.transform.rotation.z = 0.
    test_transform3.transform.rotation.w = 0.707

    blackboard = py_trees.blackboard.Blackboard()

    grasp_pose = Pose()
    grasp_pose.position.x = 0.75
    grasp_pose.position.y = 0.0
    grasp_pose.position.z = 1.0
    grasp_pose.orientation.w = 0.924
    grasp_pose.orientation.x = 0.
    grasp_pose.orientation.y = 0.383
    grasp_pose.orientation.z = 0.
    blackboard.set('grasp_pose', grasp_pose)

    bb = BoundingBox3D()
    bb.center.position.x = 1.0
    bb.center.position.y = 0.0
    bb.center.position.z = 0.75
    bb.center.orientation.x = 0.0
    bb.center.orientation.y = 0.087
    bb.center.orientation.z = 0.0
    bb.center.orientation.w = 0.996
    bb.size.x = 0.25
    bb.size.y = 0.25
    bb.size.z = 0.5
    blackboard.set('crop_box', bb)

    left_wall_pose = Pose()
    left_wall_pose.position.y = 0.5
    left_wall_pose.orientation.w = 1.0

    right_wall_pose = Pose()
    right_wall_pose.position.y = -0.5
    right_wall_pose.orientation.w = 1.0

    bot_wall_pose = Pose()
    bot_wall_pose.position.z = 0.45
    bot_wall_pose.orientation.w = 1.0

    table = Pose()
    table.position.x = 0.70
    table.position.y = 0.0
    table.position.z = 0.280
    table.orientation.w = 1.0
    blackboard.set('table_collision_obj', ['table', table, [0.85, 4, table.position.z * 2]])

    # gripper_length = 0.154
    # gripper_length = 0.145
    gripper_length = 0.150
    pre_grasp_offset = 0.1

    # to_grasp_tf = TransformStamped()
    # to_grasp_tf.header.frame_id = "gripper_link"
    # to_grasp_tf.transform.translation.x = pre_grasp_offset * 1.0
    # to_grasp_tf.transform.rotation.w = 1.0

    # to_place_tf = TransformStamped()
    # to_place_tf.header.frame_id = "gripper_link"
    # to_place_tf.transform.translation.x = pre_grasp_offset * 0.8
    # to_place_tf.transform.rotation.w = 1.0

    # up_tf = TransformStamped()
    # up_tf.header.frame_id = "base_link"
    # up_tf.transform.translation.z = 0.1
    # up_tf.transform.rotation.w = 1

    table_crop_box = BoundingBox3D()
    table_crop_box.center.orientation.w = 1.0
    table_crop_box.size.x = 20
    table_crop_box.size.y = 20
    table_crop_box.size.z = 4
    py_trees.blackboard.Blackboard().set('table_crop_box', table_crop_box)

    test_move_base = move_base_msgs.MoveBaseGoal()
    test_move_base.target_pose.header.stamp=rospy.Time.now()
    test_move_base.target_pose.header.seq = 2
    test_move_base.target_pose.header.frame_id = "map"
    test_move_base.target_pose.pose.orientation.w = 1
    test_move_base.target_pose.pose.position.y = -3
    test_move_base.target_pose.pose.position.x = 3


    f = open('/home/user/catkin_ws/src/mobile_manipulation/srp-md/data/gazebo_test/table_1/model.sdf','r')
    sdff = f.read()
    # grasploc_grasp_fall = py_trees.composites.Selector('grasploc_grasp_fall')
    # grasploc_grasp_seq = py_trees.composites.Sequence('grasploc_grasp_seq')
    # grasploc_grasp_seq.add_children([
    #     SetAllowGripperCollisionAct('act_ignore_gripper_collision', allow=True),
    #     # MoveToRelativePoseAct('act_move_to_grasp_pose', transform=to_grasp_tf),
    #     RelativeCartesianMoveAct('act_move_to_grasp_pose', pose_diff_msg=to_grasp_tf),
    #     CloseGripperAct('act_close_gripper'),
    #     # MoveToRelativePoseAct('act_move_up', transform=up_tf),
    #     RelativeCartesianMoveAct('act_move_up', pose_diff_msg=up_tf),
    #     SetAllowGripperCollisionAct('act_ignore_gripper_collision', allow=False)
    # ])

    # grasploc_grasp_fall.add_children([
    #     grasploc_grasp_seq,
    #     py_trees.meta.success_is_failure(SetAllowGripperCollisionAct)(name='act_ignore_gripper_collision', allow=False)
    # ])

    root.add_children([
        # LinkDettachingAct('LinkDettachAct', object_name='meat_0', link_name='link_1'),
        # PushBoxAct('PushBoxAct'),
        # py_trees_ros.subscribers.ToBlackboard(
        #     name='act_get_groundtruth',
        #     topic_name='/gazebo/model_states',
        #     topic_type=ModelStates,
        #     blackboard_variables={'model_state': None},
        #     clearing_policy=py_trees.common.ClearingPolicy.ON_INITIALISE),
        # StabilizeObjectAct('StabilizeObjectAct', obj_name='cracker_0'),
        # LinkDettachingAct('LinkDettachAct', object_name='mustard_0', link_name='link_1'),
        SpawnModelAct('SpawnModelAct'),
        # TuckBehavior('TuckBehavior'),
        # GetFakeDopeSnapshotAct('act_get_dope_snapshot'),
        # py_trees_ros.subscribers.ToBlackboard(
        #     name='act_get_groundtruth',
        #     topic_name='/gazebo/model_states',
        #     topic_type=ModelStates,
        #     blackboard_variables={'model_state': None},
        #     clearing_policy=py_trees.common.ClearingPolicy.ON_INITIALISE),
        # SleepBehavior('act_sleep_a_smidge', duration=0.5),
        # GroceryBoxInitializationAct('GroceryBoxInitializationAct'),
        # ObjectTestInitializationAct('ObjectTestInitializationAct'),
        # ObjectInitializationAct('ObjectInitializationAct'),


        # py_trees_ros.subscribers.ToBlackboard(
        #     name='act_get_groundtruth',
        #     topic_name='/gazebo/model_states',
        #     topic_type=ModelStates,
        #     blackboard_variables={'model_state': None},
        #     clearing_policy=py_trees.common.ClearingPolicy.ON_INITIALISE),
        # SleepBehavior('act_sleep_a_smidge', duration=0.5),
        # ObjectTranslationAct('ObjectTranslationAct'),

        # AddAllObjectCollisionBoxAct('act_add_all_object_collision_box'),
        # LinkDettachingAct('LinkDettachAct', object_name='cracker_1', link_name='link_1'),
        # LinkDettachingAct('LinkDettachAct', object_name='gelatin_0', link_name='link_1'),
        
        # LinkDettachingAct('LinkDettachAct', object_name='meat_0', link_name='link_1'),
        # LinkDettachingAct('LinkDettachAct', object_name='soup_0', link_name='link_1'),
        # do not forget to add this back when real robot test
        # AddCollisionBoxAct('act_add_left_wall', box_name='left_wall', box_pose=left_wall_pose, box_size=[10, 0.1, 10]),
        # AddCollisionBoxAct('act_add_right_wall', box_name='right_wall', box_pose=right_wall_pose, box_size=[10, 0.1, 10]),
        # AddCollisionBoxAct('act_add_bot_wall', box_name='bot_wall', box_pose=bot_wall_pose, box_size=[0.5, 0.5, 0.01]),
        # AddCollisionBoxAct('act_add_table', box_bb_key='table_collision_obj'),
        # AddCollisionBoxAct('act_add_bot_wall', box_name='bot_wall', box_pose=bot_wall_pose, box_size=[0.5, 0.5, 0.01]),
        # py_trees.meta.oneshot(ResetAct)('reset'),
        # py_trees.meta.oneshot(FullyExtendTorso)('act_please_extend_torso'),
        FullyExtendTorso('act_please_extend_torso'),
        SetAllowGripperCollisionAct('act_ignore_gripper_collision', allow=False),
        # FullyCollapseTorso('act_please_collapse_torso'),
        # GetDopeSnapshotAct('act_get_dope_snapshot'),
        # PickAct('pick_1', 'grasp_pose'),
        OpenGripperAct('act_open_gripper'),
        TuckBehavior(name='act_tuck_arm', tuck_pose='tuck'),
        HeadMoveBehavior('head_behavior', x=1, y=0, z=0.05),
        # TuckWithCondBehavior('act_tuck_arm', tuck_pose='tuck'),
        # # # PlaceWithPoseAct('place_1', 'grasp_pose'),
        # # MsurfaceoveToPoseAct('move_to_test_pose', pose=test_pose),
        # # MoveToRelativePoseAct('move_to_test_pose', transform=test_transform1),
        # # MoveToRelativePoseAct('move_to_test_pose', transform=test_transform2),
        # # MoveToRelativePoseAct('move_to_test_pose', transform=test_transform3),
        
        py_trees_ros.subscribers.ToBlackboard(
            name='act_get_pc',
            topic_name='/head_camera/depth_registered/points',
            topic_type=PointCloud2,
            blackboard_variables={'in_pc': None},
            clearing_policy=py_trees.common.ClearingPolicy.ON_INITIALISE),
        py_trees_ros.subscribers.ToBlackboard(
            name='act_get_pc',
            topic_name='/head_camera/depth_downsample/points',
            topic_type=PointCloud2,
            blackboard_variables={'depth_downsampled': None},
            clearing_policy=py_trees.common.ClearingPolicy.ON_INITIALISE),
        py_trees_ros.subscribers.ToBlackboard(
            name='act_get_pc',
            topic_name='/head_camera/depth_registered/points',
            topic_type=PointCloud2,
            blackboard_variables={'depth_pc': None},
            clearing_policy=py_trees.common.ClearingPolicy.ON_INITIALISE),
        # py_trees_ros.subscribers.ToBlackboard(
        #     name='act_get_groundtruth',
        #     topic_name='/gazebo/model_states',
        #     topic_type=ModelStates,
        #     blackboard_variables={'model_state': None},
        #     clearing_policy=py_trees.common.ClearingPolicy.ON_INITIALISE),
        # FetchInitializationAct('FetchInitializationAct'),

        # SleepBehavior('act_sleep_a_smidge', duration=1),
        # GetFakeDopeSnapshotAct('act_get_dope_snapshot'),
        # TeleportObjectAct('TeleportObject', obj_name='cracker_0'),
        # TeleportObjectAct('TeleportObject', obj_name='cracker_1'),
        # TeleportObjectAct('TeleportObject', obj_name='soup_0'),
        # GetDopeSnapshotAct('act_get_dope_snapshot'),
        # ChooseGrasplocObjAct('act_choose_grasploc_obj'),
        # py_trees_ros.subscribers.ToBlackboard(
        #     name='act_get_pc',
        #     topic_name='/head_camera/depth_registered/points',
        #     topic_type=PointCloud2,
        #     blackboard_variables={'in_pc': None},
        #     clearing_policy=py_trees.common.ClearingPolicy.ON_INITIALISE),
        # py_trees_ros.subscribers.ToBlackboard(
        #     name='act_get_pc',
        #     topic_name='/head_camera/depth_downsample/points',
        #     topic_type=PointCloud2,
        #     blackboard_variables={'depth_downsampled': None},
        #     clearing_policy=py_trees.common.ClearingPolicy.ON_INITIALISE),
        # TFPCAct('act_tf_pc', 'in_pc', 'base_link', 'tfed_pc'),
        # # PCPubAct('act_pub_tfed_pc', 'tfed_pc', 'tfed_pc'),
        # CropPCAct('act_test_crop_pc', 'tfed_pc', 'crop_box', 'croped_pc'),
        # PCPubAct('act_pub_croped_pc', 'croped_pc', 'croped_pc'),
        # AddCollisionBoxAct('act_add_left_wall', box_name='cracker_0', box_pose=bb.center,
        #                     box_size=[bb.size.x, bb.size.y, bb.size.z]),
        # AttachObjectAct('act_attach_object', object_name='cracker_0', to_attach=True),

        # AttachObjectAct('act_dettach_object', object_name='cracker_0', to_attach=False),
        # RemoveCollisionBoxAct('act_remove_temp_wall', box_name='cracker_0'),
        # GetDopeAndPoseAct('act_dope_and_pose_act'),
        # GrasplocAct('act_grasploc', 'croped_pc', 'grasploc'),
        # GraspPoseGeneration('generate_gripper_pose'),
        # FilterGrasplocPoints('act_filt_grasploc'),
        # OffsetPoses('act_offset_grasploc_poses',
        #             offset=[-(gripper_length + pre_grasp_offset), 0, 0],
        #             in_poses_key='filtered_grasploc',
        #             out_poses_key='offset_grasploc', debug=True), # The gripper origin is in the wrist so move out along x
        # GetTableAct('act_get_table'),
        # FreeSpaceFinderAct('act_find_free_space'),
        # GetStackPoseAct('act_get_stack_pose'),

        # GrasplocPickAct('act_grasploc_pick', 'offset_grasploc'),
        # MoveToStartAct('act_grasploc_pick', 'offset_grasploc'),

# 'Near' 'Stacking'
        # PickAct('PickAct', 'cracker_0', 'table'),
        # PlaceAct('placeAct', 'cracker_0', 'table'),
        # PickAct('PickAct', 'sugar_0', 'table'),
        # PlaceAct('placeAct', 'sugar_0', 'table'),
        # StablizeObjectAct('StablizeObjectAct', obj_name="cracker_0"),
        # StablizeObjectAct('StablizeObjectAct', obj_name='cracker_1'),
        # LinkAttachingAct('LinkAttachAct', object_name='unit_box', link_name='link', relative_object_name='cracker_test', relative_link_name='link_1'),
        # LinkDettachingAct('LinkDettachAct', object_name='unit_box', link_name='link', relative_object_name='cracker_0', relative_link_name='link_1'),
        # PickAct('PickAct', 'cracker_0', 'cracker_1', 'Stacking'),
        # PickAct('PickAct', 'cracker_0', 'cracker_1', 'Near'),
        # PlaceAct('placeAct', 'cracker_0', 'cracker_1'),
        # PickAct('PickAct', 'soup_0', 'soup_1', 'Near'),
        # PlaceAct('PickAct', 'soup_0', 'soup_1'),
        # PushBoxAct('PushBoxAct'),
        # GrabBoxAct('GrabBoxAct'),

        # PushBoxAct('PushBoxAct'),
        # GrabBoxAct('GrabBoxAct'),
        # py_trees_ros.actions.ActionClient(
        # name="Move Out",
        # action_namespace="/move_base",
        # action_spec=move_base_msgs.MoveBaseAction,
        # action_goal=test_move_base
        # ),

        # py_trees_ros.actions.ActionClient(
        # name="Move Out",
        # action_namespace="/gazebo/spawn_sdf_model",
        # action_spec=move_base_msgs.MoveBaseAction,
        # action_goal=test_move_base
        # ),
        
        # py_trees_ros.subscribers.ToBlackboard(
        #     name='act_get_groundtruth',
        #     topic_name='/gazebo/model_states',
        #     topic_type=ModelStates,
        #     blackboard_variables={'model_state': None},
        #     clearing_policy=py_trees.common.ClearingPolicy.ON_INITIALISE),
        # SleepBehavior('act_sleep_a_smidge', duration=0.5),
        # ObjectTranslationAct('ObjectTranslationAct'),

        # PickAct('PickAct', 'cracker_0', 'table'),
        # PlaceAct('PickAct', 'cracker_0', 'table'),

        # py_trees_ros.subscribers.ToBlackboard(
        #     name='act_get_groundtruth',
        #     topic_name='/gazebo/model_states',
        #     topic_type=ModelStates,
        #     blackboard_variables={'model_state': None},
        #     clearing_policy=py_trees.common.ClearingPolicy.ON_INITIALISE),
        # SleepBehavior('act_sleep_a_smidge', duration=0.5),
        # ObjectTranslationAct('ObjectTranslationAct'),

        # PickAct('PickAct', 'gelatin_0', 'cracker_0', 'Stacking'),
        # PlaceAct('PickAct', 'gelatin_0', 'cracker_0'),

        # py_trees_ros.subscribers.ToBlackboard(
        #     name='act_get_groundtruth',
        #     topic_name='/gazebo/model_states',
        #     topic_type=ModelStates,
        #     blackboard_variables={'model_state': None},
        #     clearing_policy=py_trees.common.ClearingPolicy.ON_INITIALISE),
        # SleepBehavior('act_sleep_a_smidge', duration=0.5),
        # ObjectTranslationAct('ObjectTranslationAct'),

        # # PickAct('PickAct', 'sugar_0', 'cracker_0', 'Stacking'),
        # # PlaceAct('PickAct', 'sugar_0', 'cracker_0'),

        # PickAct('PickAct', 'soup_0', 'cracker_0', "Near"),
        # PlaceAct('PickAct', 'soup_0', 'cracker_0'),

        # py_trees_ros.subscribers.ToBlackboard(
        #     name='act_get_groundtruth',
        #     topic_name='/gazebo/model_states',
        #     topic_type=ModelStates,
        #     blackboard_variables={'model_state': None},
        #     clearing_policy=py_trees.common.ClearingPolicy.ON_INITIALISE),
        # SleepBehavior('act_sleep_a_smidge', duration=0.5),
        # ObjectTranslationAct('ObjectTranslationAct'),

        # PickAct('PickAct', 'soup_1', 'cracker_0', "Near"),
        # PlaceAct('PickAct', 'soup_1', 'cracker_0'),


        # py_trees_ros.subscribers.ToBlackboard(
        #     name='act_get_groundtruth',
        #     topic_name='/gazebo/model_states',
        #     topic_type=ModelStates,
        #     blackboard_variables={'model_state': None},
        #     clearing_policy=py_trees.common.ClearingPolicy.ON_INITIALISE),
        # SleepBehavior('act_sleep_a_smidge', duration=0.5),
        # ObjectTranslationAct('ObjectTranslationAct'),


        # PickAct('PickAct', 'meat_0', 'cracker_0', "Near"),
        # PlaceAct('PickAct', 'meat_0', 'cracker_0'),


        # py_trees_ros.subscribers.ToBlackboard(
        #     name='act_get_groundtruth',
        #     topic_name='/gazebo/model_states',
        #     topic_type=ModelStates,
        #     blackboard_variables={'model_state': None},
        #     clearing_policy=py_trees.common.ClearingPolicy.ON_INITIALISE),
        # SleepBehavior('act_sleep_a_smidge', duration=0.5),
        # ObjectTranslationAct('ObjectTranslationAct'),
        # PickAct('PickAct', 'mustard_0', 'table', "Away"),
        # PlaceAct('PickAct', 'mustard_0', 'table'), 

        # PushBoxAct('PushBoxAct'),
        # GrabBoxAct('GrabBoxAct'),

        # py_trees_ros.subscribers.ToBlackboard(
        #     name='act_get_groundtruth',
        #     topic_name='/gazebo/model_states',
        #     topic_type=ModelStates,
        #     blackboard_variables={'model_state': None},
        #     clearing_policy=py_trees.common.ClearingPolicy.ON_INITIALISE),
        # SleepBehavior('act_sleep_a_smidge', duration=0.5),
        # ObjectTranslationAct('ObjectTranslationAct'),

        # PickAct('PickAct', 'cracker_1', 'table'),
        # PlaceAct('PickAct', 'cracker_1', 'table'),

        # py_trees_ros.subscribers.ToBlackboard(
        #     name='act_get_groundtruth',
        #     topic_name='/gazebo/model_states',
        #     topic_type=ModelStates,
        #     blackboard_variables={'model_state': None},
        #     clearing_policy=py_trees.common.ClearingPolicy.ON_INITIALISE),
        # SleepBehavior('act_sleep_a_smidge', duration=0.5),
        # ObjectTranslationAct('ObjectTranslationAct'),

        # # PickAct('PickAct', 'gelatin_0', 'cracker_1', "Stacking"),
        # # PlaceAct('PickAct', 'gelatin_0', 'cracker_1'),
        # PickAct('PickAct', 'sugar_0', 'cracker_1', 'Stacking'),
        # PlaceAct('PickAct', 'sugar_0', 'cracker_1'),

        

        # py_trees_ros.subscribers.ToBlackboard(
        #     name='act_get_groundtruth',
        #     topic_name='/gazebo/model_states',
        #     topic_type=ModelStates,
        #     blackboard_variables={'model_state': None},
        #     clearing_policy=py_trees.common.ClearingPolicy.ON_INITIALISE),
        # SleepBehavior('act_sleep_a_smidge', duration=0.5),
        # ObjectTranslationAct('ObjectTranslationAct'),

        # PickAct('PickAct', 'soup_2', 'cracker_1', "Near"),
        # PlaceAct('PickAct', 'soup_2', 'cracker_1'),

        # py_trees_ros.subscribers.ToBlackboard(
        #     name='act_get_groundtruth',
        #     topic_name='/gazebo/model_states',
        #     topic_type=ModelStates,
        #     blackboard_variables={'model_state': None},
        #     clearing_policy=py_trees.common.ClearingPolicy.ON_INITIALISE),
        # SleepBehavior('act_sleep_a_smidge', duration=0.5),
        # ObjectTranslationAct('ObjectTranslationAct'),

        # PickAct('PickAct', 'soup_3', 'cracker_1', "Near"),
        # PlaceAct('PickAct', 'soup_3', 'cracker_1'),

        # py_trees_ros.subscribers.ToBlackboard(
        #     name='act_get_groundtruth',
        #     topic_name='/gazebo/model_states',
        #     topic_type=ModelStates,
        #     blackboard_variables={'model_state': None},
        #     clearing_policy=py_trees.common.ClearingPolicy.ON_INITIALISE),
        # SleepBehavior('act_sleep_a_smidge', duration=0.5),
        # ObjectTranslationAct('ObjectTranslationAct'),

        # PickAct('PickAct', 'meat_1', 'cracker_1', "Near"),
        # PlaceAct('PickAct', 'meat_1', 'cracker_1'),

        # py_trees_ros.subscribers.ToBlackboard(
        #     name='act_get_groundtruth',
        #     topic_name='/gazebo/model_states',
        #     topic_type=ModelStates,
        #     blackboard_variables={'model_state': None},
        #     clearing_policy=py_trees.common.ClearingPolicy.ON_INITIALISE),
        # SleepBehavior('act_sleep_a_smidge', duration=0.5),
        # ObjectTranslationAct('ObjectTranslationAct'),

        # PickAct('PickAct', 'meat_2', 'cracker_1', "Near"),
        # PlaceAct('PickAct', 'meat_2', 'cracker_1'),
        # py_trees_ros.subscribers.ToBlackboard(
        #     name='act_get_groundtruth',
        #     topic_name='/gazebo/model_states',
        #     topic_type=ModelStates,
        #     blackboard_variables={'model_state': None},
        #     clearing_policy=py_trees.common.ClearingPolicy.ON_INITIALISE),
        # SleepBehavior('act_sleep_a_smidge', duration=0.5),
        # ObjectTranslationAct('ObjectTranslationAct'),
        # PickAct('PickAct', 'mustard_1', 'table', "Away"),
        # PlaceAct('PickAct', 'mustard_1', 'table'),
        # PickAct('PickAct', 'mustard_0', 'table', "Away"),
        # PlaceAct('PickAct', 'mustard_0', 'table'), 

        # PickAct('PickAct', 'meat_0', 'cracker_0', "Near"),
        # PlaceAct('PickAct', 'meat_0', 'cracker_0'),

        # PlaceAct('placeAct', 'mustard_0', 'table'),
        # StablizeObjectAct('StablizeObjectAct', obj_name="mustard_0"),
        # PickAct('PickAct', 'meat_0', 'meat_1', 'Stacking'),
        # PlaceAct('placeAct', 'meat_0', 'meat_1'),
        # PickAct('PickAct', 'sugar_0', 'cracker_0', 'Stacking'),
        # PlaceAct('placeAct', 'sugar_0', 'cracker_0'),
        # PickAct('PickAct', 'gelatin_0', 'cracker_0', 'Near'),
        # PlaceAct('placeAct', 'gelatin_0', 'cracker_0'),
        # PickAct('PickAct', 'gelatin_0', 'cracker_0', 'Near'),
        # PlaceAct('placeAct', 'gelatin_0', 'cracker_0'),
        # PickAct('PickAct', 'meat_0', 'cracker_0', 'Near'),
        # PlaceAct('placeAct', 'meat_0', 'cracker_0'),
        # PickAct('PickAct', 'mustard_0', 'cracker_0', 'Near'),
        # PlaceAct('placeAct', 'mustard_0', 'cracker_0'),
        # PickAct('PickAct', 'cracker_2', 'cracker_0', relation='Stacking'),
        # PlaceAct('placeAct', 'cracker_2', 'cracker_0'),


        # grasploc_grasp_fall,
        
        # OffsetPoses('act_offset_place_poses',
        #             offset=[-(gripper_length + pre_grasp_offset), 0, 0],
        #             in_poses_key='free_space_poses',
        #             out_poses_key='offset_place_pose', debug=True),
        # MoveToFirstPoseAct('act_pick_grasploc', poses_key='offset_place_pose'),
        # RelativeCartesianMoveAct('act_move_to_grasp_pose', pose_diff_msg=to_place_tf),
        # OpenGripperAct('act_open_gripper'),
        # RelativeCartesianMoveAct('act_move_up', pose_diff_msg=up_tf),
        # TuckWithCondBehavior('act_tuck_arm', tuck_pose='tuck'),

        # CropPCAct('act_test_crop_pc', 'depth_downsampled_premod', 'table_crop_box', 'depth_downsampled'),
        # GetDesiredPoseAct('act_get_desired_pose', 'table', 'cracker'),
    ])
    return py_trees_ros.trees.BehaviourTree(root)


def shutdown(tree):
    """Stop the tree."""
    tree.interrupt()


def main():
    # Init ros
    rospy.init_node('srp_md_actions_test')

    # This is a test tree so initilize set debug level
    py_trees.logging.level = py_trees.logging.Level.DEBUG

    # Build a tree
    tree = build_tree()

    # Make sure the tree gets shutdown when ros does
    rospy.on_shutdown(functools.partial(shutdown, tree))

    # Setup the tree
    #   Give it 10 seconds to start
    timeout = 100000
    print 'Waiting {}s for tree to start'.format(timeout)
    if not tree.setup(timeout=timeout):
        rospy.logerr("failed to setup the tree, aborting.")
        sys.exit(1)

    # Start ticking tree at 1 / TICKPERIOD(ms)
    tree.tick_tock(TICKPERIOD)


if __name__ == '__main__':
    main()
