#!/usr/bin/env python
import functools
import sys

import rospy

import py_trees
import py_trees_ros

from geometry_msgs.msg import Pose, Transform
from sensor_msgs.msg import PointCloud2
from vision_msgs.msg import BoundingBox3D

from srp_md.act import (ResetAct, GripperAct, OpenGripperAct, CloseGripperAct, MoveToPoseAct, MoveToRelativePoseAct,
                        GetDopeSnapshotAct, PickAct, PlaceAct, GetTableAct, CropPCAct, TFPCAct, PCPubAct,
                        ChooseGrasplocObjAct, GrasplocAct)
from behavior_manager.interfaces.manipulation_behavior_new import (TuckWithCondBehavior, HeadMoveBehavior,
                                                                   FullyCollapseTorso, FullyExtendTorso)
from behavior_manager.interfaces.fetch_manipulation_behavior import *

TICKPERIOD = 100  # ms


def build_tree():
    root = py_trees.composites.Sequence(name='srp_md_actions_test')

    # test_pose = Pose()
    # test_pose.position.x = 0.75
    # test_pose.position.y = 0.
    # test_pose.position.z = 1.0
    # test_pose.orientation.w = 0.707
    # test_pose.orientation.x = 0.707
    # test_pose.orientation.y = 0.
    # test_pose.orientation.z = 0.

    # test_transform1 = Transform()
    # test_transform1.translation.x = 0.
    # test_transform1.translation.y = 0.
    # test_transform1.translation.z = 0.25
    # test_transform1.rotation.x = 0.707
    # test_transform1.rotation.y = 0.
    # test_transform1.rotation.z = 0.
    # test_transform1.rotation.w = 0.707

    # test_transform2 = Transform()
    # test_transform2.translation.x = 0.
    # test_transform2.translation.y = 0.25
    # test_transform2.translation.z = 0.
    # test_transform2.rotation.x = 0.707
    # test_transform2.rotation.y = 0.
    # test_transform2.rotation.z = 0.
    # test_transform2.rotation.w = 0.707

    # test_transform3 = Transform()
    # test_transform3.translation.x = 0.
    # test_transform3.translation.y = 0.
    # test_transform3.translation.z = -0.25
    # test_transform3.rotation.x = 0.707
    # test_transform3.rotation.y = 0.
    # test_transform3.rotation.z = 0.
    # test_transform3.rotation.w = 0.707

    blackboard = py_trees.blackboard.Blackboard()

    grasp_pose = Pose()
    grasp_pose.position.x = 0.75
    grasp_pose.position.y = 0.0
    grasp_pose.position.z = 1.0
    grasp_pose.orientation.w = 0.924
    grasp_pose.orientation.x = 0.
    grasp_pose.orientation.y = 0.383
    grasp_pose.orientation.z = 0.
    blackboard.set('grasp_pose', ['rando_obj', grasp_pose])

    bb = BoundingBox3D()
    bb.center.position.x = 1.0
    bb.center.position.y = 0.0
    bb.center.position.z = 0.75
    bb.center.orientation.x = 0.0
    bb.center.orientation.y = 0.087
    bb.center.orientation.z = 0.0
    bb.center.orientation.w = 0.996
    bb.size.x = 0.25
    bb.size.y = 0.25
    bb.size.z = 0.5
    blackboard.set('crop_box', bb)

    root.add_children([
        # py_trees.meta.oneshot(ResetAct)('reset'),
        # py_trees.meta.oneshot(FullyExtendTorso)('act_please_extend_torso'),
        # FullyExtendTorso('act_please_extend_torso'),
        # FullyCollapseTorso('act_please_collapse_torso'),
        # GetDopeSnapshotAct('act_get_dope_snapshot'),
        # PickAct('pick_1', 'grasp_pose'),
        # PlaceAct('place_1', 'grasp_pose'),
        # MoveToPoseAct('move_to_test_pose', pose=test_pose),
        # MoveToRelativePoseAct('move_to_test_pose', transform=test_transform1),
        # MoveToRelativePoseAct('move_to_test_pose', transform=test_transform2),
        # MoveToRelativePoseAct('move_to_test_pose', transform=test_transform3),
        # GetTableAct('act_get_table'),
        GetDopeSnapshotAct('act_get_dope_snapshot'),
        ChooseGrasplocObjAct('act_choose_grasploc_obj'),
        py_trees_ros.subscribers.ToBlackboard(
            name='act_get_pc',
            topic_name='/head_camera/depth_registered/points',
            topic_type=PointCloud2,
            blackboard_variables={'in_pc': None},
            clearing_policy=py_trees.common.ClearingPolicy.ON_INITIALISE),
        TFPCAct('act_tf_pc', 'in_pc', 'base_link', 'tfed_pc'),
        PCPubAct('act_pub_tfed_pc', 'tfed_pc', 'tfed_pc'),
        CropPCAct('act_test_crop_pc', 'tfed_pc', 'crop_box', 'croped_pc'),
        PCPubAct('act_pub_croped_pc', 'croped_pc', 'croped_pc'),
        GrasplocAct('act_grasploc', 'croped_pc', 'grasploc')
    ])
    return py_trees_ros.trees.BehaviourTree(root)


def shutdown(tree):
    """Stop the tree."""
    tree.interrupt()


def main():
    # Init ros
    rospy.init_node('srp_md_actions_test')

    # This is a test tree so initilize set debug level
    # py_trees.logging.level = py_trees.logging.Level.DEBUG

    # Build a tree
    tree = build_tree()

    # Make sure the tree gets shutdown when ros does
    rospy.on_shutdown(functools.partial(shutdown, tree))

    # Setup the tree
    #   Give it 10 seconds to start
    timeout = 10
    print 'Waiting {}s for tree to start'.format(timeout)
    if not tree.setup(timeout=timeout):
        rospy.logerr("failed to setup the tree, aborting.")
        sys.exit(1)

    # Start ticking tree at 1 / TICKPERIOD(ms)
    tree.tick_tock(TICKPERIOD)


if __name__ == '__main__':
    main()
